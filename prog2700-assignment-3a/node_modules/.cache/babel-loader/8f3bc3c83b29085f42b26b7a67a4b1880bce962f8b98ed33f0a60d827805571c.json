{"ast":null,"code":"export function calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  // Iterate through each winning line\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // Check if the line has the same non-null value across all squares\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      // Return the winner and the winning line indices\n      return {\n        winner: squares[a],\n        winningLine: [a, b, c]\n      };\n    }\n  }\n  // Return null if there's no winner\n  return {\n    winner: null,\n    winningLine: []\n  };\n}\nexport function isDraw(squares) {\n  // Check if all squares are filled\n  const isBoardFull = squares.every(square => square !== null);\n  // Calculate the winner\n  const {\n    winner\n  } = calculateWinner(squares);\n  // The game is a draw if the board is full and there is no winner\n  return isBoardFull && !winner;\n}","map":{"version":3,"names":["calculateWinner","squares","lines","i","length","a","b","c","winner","winningLine","isDraw","isBoardFull","every","square"],"sources":["C:/Users/roger/Desktop/Winter 2024 Courses/PROG2700/Assignments/Assignment 3/PROG2700-Assignment-3A/prog2700-assignment-3a/src/components/gameUtils.js"],"sourcesContent":["export function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    \r\n    // Iterate through each winning line\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        // Check if the line has the same non-null value across all squares\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            // Return the winner and the winning line indices\r\n            return {\r\n                winner: squares[a],\r\n                winningLine: [a, b, c]\r\n            };\r\n        }\r\n    }\r\n    // Return null if there's no winner\r\n    return {\r\n        winner: null,\r\n        winningLine: []\r\n    };\r\n}\r\n\r\nexport function isDraw(squares) {\r\n    // Check if all squares are filled\r\n    const isBoardFull = squares.every(square => square !== null);\r\n    // Calculate the winner\r\n    const { winner } = calculateWinner(squares);\r\n    // The game is a draw if the board is full and there is no winner\r\n    return isBoardFull && !winner;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,OAAO,EAAE;EACrC,MAAMC,KAAK,GAAG,CACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ;;EAED;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAM,CAACE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGL,KAAK,CAACC,CAAC,CAAC;IAC1B;IACA,IAAIF,OAAO,CAACI,CAAC,CAAC,IAAIJ,OAAO,CAACI,CAAC,CAAC,KAAKJ,OAAO,CAACK,CAAC,CAAC,IAAIL,OAAO,CAACI,CAAC,CAAC,KAAKJ,OAAO,CAACM,CAAC,CAAC,EAAE;MACtE;MACA,OAAO;QACHC,MAAM,EAAEP,OAAO,CAACI,CAAC,CAAC;QAClBI,WAAW,EAAE,CAACJ,CAAC,EAAEC,CAAC,EAAEC,CAAC;MACzB,CAAC;IACL;EACJ;EACA;EACA,OAAO;IACHC,MAAM,EAAE,IAAI;IACZC,WAAW,EAAE;EACjB,CAAC;AACL;AAEA,OAAO,SAASC,MAAMA,CAACT,OAAO,EAAE;EAC5B;EACA,MAAMU,WAAW,GAAGV,OAAO,CAACW,KAAK,CAACC,MAAM,IAAIA,MAAM,KAAK,IAAI,CAAC;EAC5D;EACA,MAAM;IAAEL;EAAO,CAAC,GAAGR,eAAe,CAACC,OAAO,CAAC;EAC3C;EACA,OAAOU,WAAW,IAAI,CAACH,MAAM;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}